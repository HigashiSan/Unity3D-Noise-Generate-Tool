#pragma kernel CSNoise

RWTexture2D<float4> Texture;

float noiseScale;
int Type = 0;
int size;

float2 random2(float2 p)
{
    return frac(sin(float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)))) *
        43758.5453);
}

float2 hash22(float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

float PerlinNoise(float2 p)
{
    float2 pi = floor(p);
    float2 pf = frac(p);
    
    float2 w = pf * pf * pf * (6 * pf * pf - 15 * pf + 10);
     
    return lerp(lerp(dot(hash22(pi + float2(0.0, 0.0)), pf - float2(0.0, 0.0)),
                    dot(hash22(pi + float2(1.0, 0.0)), pf - float2(1, 0.0)), w.x),
                lerp(dot(hash22(pi + float2(0.0, 1.0)), pf - float2(0.0, 1.0)),
                    dot(hash22(pi + float2(1.0, 1.0)), pf - float2(1.0, 1.0)), w.x), w.y);
}

float WorleyNoise(float2 p)
{
    float min_dist = 1000;
    float2 pi = floor(p);
    float2 pf = frac(p);
    
    float num = noiseScale / 10;
    
    for (int m = -1; m <= 1; m++)
    {
        for (int n = -1; n <= 1; n++)
        {
            float2 sp = (pi + float2(m, n));
            float2 pos = 0;
            float factor = num;
            pos = (sp + factor) % factor;
         
            sp += random2(pos);
            float dist = distance(p, sp);
            min_dist = min(min_dist, dist);
        }
    }
    return min_dist;
}

float SimplexNoise(float2 p)
{
    const float K1 = 0.366025404; 
    const float K2 = 0.211324865; 
    
    float2 i = floor(p + (p.x + p.y) * K1);
    
    float2 a = p - (i - (i.x + i.y) * K2);
    float2 o = (a.x < a.y) ? float2(0, 1) : float2(1, 0);
    float2 b = a - o + K2;
    float2 c = a - 1 + 2 * K2;
    
    float3 h = max(0.5 - float3(dot(a, a), dot(b, b), dot(c, c)), 0);
    float3 n = pow(h, 4) * float3(dot(a, hash22(i)), dot(b, hash22(i + o)),
        dot(c, hash22(i + 1)));
    
    return dot(float3(70, 70, 70), n);
}

[numthreads(8,8,1)]
void CSNoise (uint3 id : SV_DispatchThreadID)
{
    float noiseValue;
    
    switch (Type)
    {
        case 0://Worley Texture
            float num = noiseScale / 10;
            num = (float) size / num;
            noiseValue = WorleyNoise(id.xy / num);
            noiseValue = 1 - noiseValue;
            break;
        case 1:
            noiseValue = PerlinNoise(id.xy / noiseScale);
            noiseValue = noiseValue * 0.5 + 0.5;
            break;
        case 2:
            noiseValue = SimplexNoise(id.xy / noiseScale);
            noiseValue = noiseValue * 0.5 + 0.5;
            break;
    }
    Texture[id.xy] = float4(noiseValue, noiseValue, noiseValue, 1);

}